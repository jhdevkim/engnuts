For the past decade, NAND flash-based storage capacity has considerably increased from several megabytes to terabytes. Accordingly, the mapping table size of the flash translation layer (FTL) has become extremely large, especially for a page mapping scheme which is to overcome the poor performance of random writes.
To permanently maintain this large page mapping table, the FTL needs to conduct internal mapping data writes in the NAND flash-based storage. However, these written amounts are considerable in NAND flash-based storage that adopts a small volatile cache memory. This result damages the performance and lifetime of the NAND flash-based storage. Even though a volatile cache memory contains the entire page mappings, FTL should employ a journaling scheme that maintains and writes only the changed mapping data at the same time. However, this brings the journal replay overhead inherited from all changed mappings. In this paper, we propose a novel FTL scheme called PIFTL that utilizes a mapping data partition. The mapping data partition basically consists of consecutive page mappings with a size smaller than one NAND page. To minimize the amount of mapping data written and the journal replay overhead, PIFTL integrates and stores every mapping data partition that has any modification. Consequently, the evaluation results show that PIFTL improves the storage performance up to 48.8% and decreases the journal replay overhead up to 28.5% in real workloads.


1. INTRODUCTION

Nowadays, most flash translation layers (FTLs) commonly use page mapping [8] to show their best results in storage performance and reliability [6], [7], [9]. Because NAND flash-based storage capacity has considerably increased from several megabytes to terabytes during the past decade, FTL with a page mapping scheme requires an extremely large mapping table for a large storage capacity. For example, the SSD capacity has been increased up to several terabytes these days, and the capacity of embedded storage (e.g., UFS [1] and eMMC [12]), which is the main storage of smartphones, has reached to 1 TiB. Therefore, the page mapping table to map all of user's data for these storage devices has also increased in size. In addition, to minimize the cost of translating address mappings, a significant number of volatile memory (e.g. DRAM) is needed. When it comes to SSDs, it seems not to be importantly considered in a form factor but the manufacturing cost might be a situation. However, in the embedded storage case, its performance can be damaged by a small volatile memory, which absolutely needs to seek address mappings.
In addition to solving the translation problem in the volatile memory, all page mapping information must be consistent [10] after the events of a power cycle and power failure. To maintain all page mappings permanently, the FTL should maintain a special area, called FTL metadata area, in NAND flash-based storage. This area is normally composed of the more reliable NAND single-level cell (SLC) blocks [4], while the user data are written to NAND multilevel cell (MLC) or triple-level cell (TLC) blocks. All the page mappings in the FTL metadata area must be synchronized into the volatile memory as a mapping cache memory. This synchronization problem between the FTL metadata area and the mapping cache memory should be considered inevitably in every kind of NAND flash-based storage.
1Solution Product & Development Team, Memory Business, Samsung-ro 1, Hwasung-si, Gyeonggi-do, Korea
2S/W Development Team, Memory Business, Samsung-ro 1, Hwasung-si, Gyeonggi-do, Korea
To handle all updates of page mappings in the FTL metadata area, the FTL should conduct internal mapping data writes in NAND flash-based storage. Irrespective of where the page mappings are updated, the FTL should write all the updated page mappings to their corresponding FTL metadata areas. To provisionally avoid several mapping writes for the updated mappings, the FTL can utilize a journaling scheme [14], which keeps track of only changed mappings and writes them at the same time to the FTL metadata area. Even though the FTL can employ a journaling scheme, the small mapping cache memory in NAND flash-based storage causes a large number of mapping writes, especially in random writes. This is because the updated page mappings have to yield their positions in the small mapping cache memory for the following writes. As a result, all the updated page mappings should be written to their corresponding FTL metadata areas.
If the storage device maintains all the page mappings in a volatile cache memory, such as SSDs, the journal data itself that have only changed page mappings can be written to the FTL metadata area. These journal data writes minimize the number of mapping writes that triggered by the small mapping cache memory. However, a large number of the journal data writes accumulate the updated page mappings in the FTL metadata area. This result can increase the journal replay overhead [18], [19] that is needed to construct up-to-date page mappings from the journal data. This normally happens at the boot-up time [17] after the events of a power cycle.
In this paper, we propose a novel FTL scheme called PIFTL that utilizes a mapping data partition. First of all, the mapping data partition is created from the page mapping table with less than one NAND page. PIFTL integrates every mapping data partition that has any modified page locations to minimize the number of mapping writes. Consequently, the evaluation results show that PIFTL improves the storage performance up to 48.8% and decreases the journal replay overhead up to 28.5% in real workloads.
