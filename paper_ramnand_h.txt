/*
 * RAMNAND.h
 *
 *  Created on: 2016. 11. 30.
 *      Author: 김정훈
 */

#ifndef INC_RAMNAND_H_
#define INC_RAMNAND_H_

#define NAND_PAGE_SIZE     (8192)
#define NAND_PAGES_PER_BLOCK   (128)
#define SLCNAND_PAGES_PER_BLOCK   (64)

#define SECTORS_PER_PAGE    (16)
#define SECTORS_PER_HALFPAGE   (8)

#define RAM_NAND_16GB		(0x01)
#define RAM_NAND_32GB		(0x02)
#define RAM_NAND_TYPE		(RAM_NAND_16GB)

#define SPFTL_LAYOUT_BASIC	(0x01)
#define SPFTL_LAYOUT_EXT	(0x02)
#define SPFTL_LAYOUT_TYPE	(SPFTL_LAYOUT_EXT)

#if (RAM_NAND_TYPE & RAM_NAND_16GB)
#define TOTAL_BLOCK_COUNT		(16384)
#if (SPFTL_LAYOUT_TYPE & SPFTL_LAYOUT_EXT)
#define META_BLOCK_COUNT		(106)
#else
#define META_BLOCK_COUNT		(75)
#endif
#elif (RAM_NAND_TYPE & RAM_NAND_32GB)
#define TOTAL_BLOCK_COUNT		(32768)
#define META_BLOCK_COUNT		(79)
#endif

void ram_nand_init(void);
void ram_nand_free(void);

int nand_program(unsigned int block, unsigned int page, unsigned char* data);
int nand_program_4(unsigned int block, unsigned int page, unsigned char* data);
int nand_host_progtram(unsigned int block, unsigned int page, unsigned int start_addr, unsigned int sector_count, unsigned char* data);

int nand_read(unsigned int block, unsigned int page, unsigned char* data);
int nand_read_4(unsigned int block, unsigned int page, unsigned char* data);
int nand_erase(unsigned int block);

unsigned int nand_read_spare(unsigned int block, unsigned int page);
unsigned int nand_write_spare(unsigned int block, unsigned int page, unsigned int lpn);


#endif /* INC_RAMNAND_H_ */
